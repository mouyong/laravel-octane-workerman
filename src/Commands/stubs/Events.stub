<?php

namespace {{ namespace }};

use GatewayWorker\Lib\Gateway;
use GatewayWorker\BusinessWorker;

/**
 * @https://github.com/mouyong/laravel-octane-workerman/#websockets
 *
 * @link ws://localhost/ws
 */
class {{ class }}
{
    public static $whiteEvent = [
        'pong',
        'login',
        'chat.send',
    ];

    public static function encode(array $message = [])
    {
        return json_encode($message, JSON_UNESCAPED_SLASHES|JSON_UNESCAPED_UNICODE|JSON_PRETTY_PRINT);
    }

    public static function decode(string $message)
    {
        $data = json_decode($message, true) ?? [];
        if (json_last_error()) {
            info('json 解析错误 code: '.json_last_error() ." reason: ". json_last_error_msg(). ' message: '.$message);

            $data = [];
        }

        if (!is_array($data)) {
            $data = [];
        }

        return $data;
    }

    public static function sendToClient(string $client_id, string $message)
    {
        return Gateway::sendToClient($client_id, $message);
    }

    public static function sendToGroup(string $group_name, string $message)
    {
        return Gateway::sendToGroup($group_name, $message);
    }

    public static function sendToAll(string $message)
    {
        return Gateway::sendToAll($message);
    }

    public static function onWorkerStart(BusinessWorker $worker)
    {
        dump(sprintf('%s #%s start', $worker->name, $worker->id));

        create_laravel_application_for_worker($worker);
    }

    public static function onConnect(string $client_id)
    {
        // 建立连接
        dump(sprintf('client_id #%s connect', $client_id));
    }

    public static function onMessage()
    {
        $args = func_get_args();
        [$client_id, $message] = $args;
        $data = Events::decode($message);

        // dump($_SERVER);
        // dump($_SESSION);
        // dump('debug mode enable? ' . config('app.debug'));
        // dump(sprintf('client_id %s send to server message: %s', $client_id, $message));
        // dump('receive data: ' . var_export($data, true));

        // Gateway::bindUid($client_id, $uid = uniqid());
        // Gateway::sendToUid($uid, 'you said: ' . $message);
        
        $eventType = $data['event_type'] ?? $data['type'] ?? null;

        $uid = Gateway::getUidByClientId($client_id);

        // 检验用户是否登录
        $user = $_SESSION['uid'] ?? null;
        if (!in_array($eventType, Events::$whiteEvent)) {
            if (!$user) {
                return Gateway::sendToClient($client_id, downlink(Events::LOGIN_RESP, null, 403, 'Please login.'));
            }
        }
        
        switch ($eventType) {
                // 维持客户端在线状态
            case 'pong':
                $_SESSION['tick_time'] = date('Y-m-d H:i:s', time());
                break;
            case 'login':
                $token = data_get($data, 'data.token');
                if (!$token) {
                    return Gateway::sendToClient($client_id, downlink(Events::LOGIN_RESP, null, 500, 'Please login'));
                }

                $_SESSION['userInfo'] = [];
                $_SESSION['userInfo']['uid'] = uniqid();
                Gateway::updateSession($client_id, [
                    'userInfo' => [
                        'userName' => uniqid(),
                    ],
                ]);
                Gateway::bindUid($client_id, $_SESSION['userInfo']['uid']);
                break;
            case 'chat.send':
                $to_user = data_get($data, 'data.to_user');
                $content = data_get($data, 'data.content');

                if (!$to_user) {
                    return Gateway::sendToClient($client_id, downlink(Events::CHAT_SEND_RESP, null, 400, 'Please select chat_room'));
                }

                if (!$content) {
                    return Gateway::sendToClient($client_id, downlink(Events::CHAT_SEND_RESP, null, 400, 'Please input message'));
                }

                Gateway::sendToGroup($to_user, $content);
                break;
            default:
                Gateway::sendToClient($client_id, '非法请求');
                break;
        }
    }

    public static function onClose(string $client_id)
    {
        // 清理数据
        dump(sprintf('client_id #%s disconnect', $client_id));
    }

    public static function onWorkerStop(BusinessWorker $worker)
    {
        dump(sprintf('%s #%s stop', $worker->name, $worker->id));
    }
}
